module GameController
imports from GLOBAL functions nat2str renamed nat2str
                    values N_SHIPS renamed N_SHIPS,
        from Player all,
        from IO all
exports all
definitions

types
ID = token;
S :: 
    p1 : Player`ID
    p2 : Player`ID
    attacker : Player`ID
    scoreLine : map Player`ID to nat
    inv p == p.p1 <> p.p2 and p.attacker in set {p.p1, p.p2};
InstanceMap = map ID to S;

state GCST of
    GC_m : InstanceMap
    init s == s = mk_GCST({|->})
  end

operations
    GameController: Player`ID * Player`ID ==> ID
    GameController(p1, p2) == let id = mk_token("GC"^nat2str(card dom GC_m)) in 
    (
        GC_m(id) := mk_S(p1, p2, p1, {p1 |-> 0, p2 |-> 0});
        return id   
    );


    -- Reset: ID ==> ()
    -- Reset(id) == (
    --     --GC_m(id).p1 := new Player(p1.name, p1.arngStrat, p1.guesStrat);
    --     --p2 := new Player(p2.name, p2.arngStrat, p2.guesStrat);
    --     GC_m(id).attacker := GC_m(id).p1;
    --     GC_m(id).scoreLine := {GC_m(id).p1 |-> 0, GC_m(id).p2 |-> 0};
    -- );
    
    Reset: ID * Player`ID * Player`ID ==> ()
    Reset(id, p1, p2) == (
        GC_m(id).p1 := p1;
        GC_m(id).p2 := p2;
        GC_m(id).attacker := GC_m(id).p1;
        GC_m(id).scoreLine := {GC_m(id).p1 |-> 0, GC_m(id).p2 |-> 0};
    );

    Start: ID ==> ()
    Start(id) == (
        Player`ArrangeShips(GC_m(id).p1);
        Player`ArrangeShips(GC_m(id).p2);
        while N_SHIPS not in set rng GC_m(id).scoreLine do
        (
            let attacker in set {GC_m(id).attacker} in
            let defender in set dom GC_m(id).scoreLine \ {attacker} in
            (
                Player`TakeTurn(attacker, defender);
                GC_m(id).scoreLine := GC_m(id).scoreLine ++ {attacker |-> Player`GetState(attacker).points};
                GC_m(id).attacker := defender;
            )
        );
        let winner in set dom GC_m(id).scoreLine be st GC_m(id).scoreLine(winner) = N_SHIPS in
            IO`printf(AnnounceWinner(winner), [card elems Player`GetState(winner).guessHist.Coords]);
            IO`printf(AnnounceScore(GC_m(id).p1, GC_m(id).p2), [Player`GetState(GC_m(id).p1).points, Player`GetState(GC_m(id).p2).points]);
    );

AnnounceWinner: Player`ID ==> seq of char
AnnounceWinner(p) == return "The winner is " ^ Player`GetState(p).name ^ " with %s guesses!\r\n";

AnnounceScore: Player`ID * Player`ID ==> seq of char
AnnounceScore(p1, p2) == return "Score: " ^ Player`GetState(p1).name ^ " %s - %s " ^ Player`GetState(p2).name ^ "\r\n";

GetState: ID ==> S
GetState(id) == return GC_m(id);


end GameController