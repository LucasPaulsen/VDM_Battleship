module DefaultArranger
imports from GLOBAL values N_SHIPS_OF_LEN renamed N_SHIPS_OF_LEN
                           N_SHIPS renamed N_SHIPS
                    types Coordinates renamed Coordinates
                    functions nat2str renamed nat2str,
        from Grid all,
        from Ship all,
        from IO operations println renamed println
                           printf renamed printf
exports all

definitions

operations
-- Arrange: Grid`ID ==> Grid`ID
-- Arrange(g) == (dcl nShipsOfLen: map nat to nat := N_SHIPS_OF_LEN;
--     while dom nShipsOfLen <> {} do
--         (dcl combinations: set of (bool * nat * nat * nat ):= 
--                 {mk_(d, l, x, y) | d in set {true, false},
--                                    l in set dom nShipsOfLen, 
--                                    x in set {1,...,Grid`GetState(g).nCols},
--                                    y in set {1,...,Grid`GetState(g).nRows}};
--             let mk_(d, l, x, y) in set combinations in
--             (let ship = Ship`Ship(mk_Coordinates(x,y), 
--                     if d then mk_Coordinates(x+l-1,y) else mk_Coordinates(x,y+l-1)) in
--                 if Grid`PlaceShip(g, ship) then
--                         if nShipsOfLen(l) > 1 then nShipsOfLen:= nShipsOfLen ++ {l |-> nShipsOfLen(l)-1}
--                             else nShipsOfLen := {l} <-: nShipsOfLen
--             )
--         );
--     return g;
--     );
-- pre Grid`GetState(g).ships = {}
-- post card Grid`GetState(g).ships = N_SHIPS;

Arrange: Grid`ID ==> Grid`ID
Arrange(g) == (dcl nShipsOfLen: map nat to nat := N_SHIPS_OF_LEN;
    while dom nShipsOfLen <> {} do
        (dcl combinations: set of (bool * nat * nat * nat ):= 
                {mk_(d, l, x, y) | d in set {true, false}, -- Pattern matching is likely to be too complex for Isabelle translation
                                   l in set dom nShipsOfLen, 
                                   x in set {1,...,Grid`GetState(g).nCols},
                                   y in set {1,...,Grid`GetState(g).nRows}};
            let mk_(d, l, x, y) in set combinations be st
            Grid`PlaceShip(g, Ship`Ship(mk_Coordinates(x,y), 
                    if d then mk_Coordinates(x+l-1,y) else mk_Coordinates(x,y+l-1))) in
                        if nShipsOfLen(l) > 1 then nShipsOfLen:= nShipsOfLen ++ {l |-> nShipsOfLen(l)-1}
                            else nShipsOfLen := {l} <-: nShipsOfLen
        );
    return g;
    );

run: () ==> ()
	run() == (
        dcl num: nat := 5134;
        println(mk_token("Ship"^ nat2str(num)));
		);

end DefaultArranger