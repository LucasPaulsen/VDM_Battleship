module Grid
imports from GLOBAL all,
        from Ship all
exports all
definitions

-- values
-- GRID_MAX_SHIPS = GLOBAL`N_SHIPS

types 

ShipT = Ship`Ship;

Grid = seq of ShipT
--inv g == len g <= GRID_MAX_SHIPS
-- and forall s in set elems g & elems s.Coords subset GLOBAL`ALL_COORDINATES

functions
PlaceableShip: Grid * ShipT -> bool
PlaceableShip(g, s) == elems s.Coords subset GLOBAL`ALL_COORDINATES and
forall ships in set elems g & elems s.Coords inter elems ships.Coords = {};

PlaceShip: Grid * ShipT -> Grid
PlaceShip(g, s) == g ^ [s]
pre PlaceableShip(g, s)
post len RESULT > len g;

Hit: Grid * GLOBAL`Coordinates -> Grid * GLOBAL`GuessResult
Hit(g, c) == if exists s in set elems g & c in set elems s.Coords
               then let i in set inds g be st c in set elems GLOBAL`SeqGet[ShipT](g,i).Coords in
                let hs = Ship`HitShip(GLOBAL`SeqGet[ShipT](g,i), c) in
                  mk_(GLOBAL`SeqReplaceAt[ShipT](g, hs.#1, i), hs.#2)
               else mk_(g, mk_GLOBAL`GuessResult(false,false));

end Grid