module GLOBAL
exports all
definitions

types
Coordinates :: 
  X : nat
  Y : nat;

GuessResult ::
  Hit : bool
  Sunk : bool;

GuessHistory ::
    Coords: seq of Coordinates
    Results: seq of GuessResult;

values
N_ROWS: nat = 5;
N_COLS: nat = 5;
MIN_LEN: nat = 2;
MAX_LEN: nat = 4;
SHIPS_BY_LEN: seq of nat = [2,2,3,4];
N_SHIPS: nat = len SHIPS_BY_LEN;
ALL_COORDINATES: set of Coordinates = {mk_Coordinates(x,y) | x in set {1,...,N_COLS},
                                                             y in set {1,...,N_ROWS}};
MAX_TOTAL_GUESSES: nat = card ALL_COORDINATES + card ALL_COORDINATES;

functions

Xcoords: set of Coordinates -> set of nat
Xcoords(coordSet) == {c.X | c in set coordSet};

Ycoords: set of Coordinates -> set of nat
Ycoords(coordSet) == {c.Y | c in set coordSet};

SeqGet[@T]: (seq of @T) * nat1 -> @T
SeqGet(s, i) == s(i);

SeqReplaceAt[@T]: (seq of @T) * @T * nat1 -> seq of @T
SeqReplaceAt(s, e, i) == let s1 = [s(x) | x in set inds s & x < i], 
                             s2 = [s(x) | x in set inds s & x > i] 
                             in s1 ^ [e] ^ s2;

test: seq of nat * nat * nat1 -> seq of nat
test(s, e, i) == SeqReplaceAt[nat](s, e, i)
-- value "test [1, 2, 3, 4] 2 3" shows it works


end GLOBAL