module DummyArranger
imports from Grid all,
        from Ship all,
        from GLOBAL all
exports all
definitions

-- ||| ALTERNATIVE COORDINATES |||
    -- let s1 = MakeShip(mk_Coordinates(1,1), mk_Coordinates(2,1)),
    --     s2 = MakeShip(mk_Coordinates(3,1), mk_Coordinates(4,1)),
    --     s3 = MakeShip(mk_Coordinates(1,3), mk_Coordinates(3,3)),
    --     s4 = MakeShip(mk_Coordinates(1,4), mk_Coordinates(4,4)) in

functions
DummyArrangeRecMeasure: Grid`Grid * Grid`Grid -> nat
DummyArrangeRecMeasure(g, s) == len s;

DummyArrangeRec: Grid`Grid * Grid`Grid -> Grid`Grid
DummyArrangeRec(g, s) == (
    if s = [] then g
    else if Grid`PlaceableShip(g, hd s) then DummyArrangeRec(Grid`PlaceShip(g,hd s), tl s) else g
)
measure DummyArrangeRecMeasure;

DummyArrange: () -> Grid`Grid
DummyArrange() == (
    let s1 = Ship`MakeShip(mk_GLOBAL`Coordinates(2,1), mk_GLOBAL`Coordinates(5,1)),
        s2 = Ship`MakeShip(mk_GLOBAL`Coordinates(1,1), mk_GLOBAL`Coordinates(1,3)),
        s3 = Ship`MakeShip(mk_GLOBAL`Coordinates(3,3), mk_GLOBAL`Coordinates(3,4)),
        s4 = Ship`MakeShip(mk_GLOBAL`Coordinates(2,4), mk_GLOBAL`Coordinates(2,5)) in
    DummyArrangeRec([], [s1, s2, s3, s4])
    )
post len RESULT = len GLOBAL`SHIPS_BY_LEN;

end DummyArranger