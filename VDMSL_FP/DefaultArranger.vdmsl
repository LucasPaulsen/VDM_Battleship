module DefaultArranger
imports from GLOBAL all,                              
        from Grid all,
        from Ship all
exports all

definitions

functions

ArrangeRecMeasure: Grid`Grid * seq of nat -> nat
ArrangeRecMeasure(g, s) == len s;

ArrangeRec: Grid`Grid * seq of nat -> Grid`Grid
ArrangeRec(g, s) == ( 
    if s = [] then g
    else let l = hd s, combinations = 
                {mk_(d, c) | d in set {true, false},
                             c in set GLOBAL`ALL_COORDINATES} in
            let mk_(d, c) in set combinations be st
            Grid`PlaceableShip(g, Ship`MakeShip(c, 
                if d then mk_GLOBAL`Coordinates(c.X+l-1,c.Y) else mk_GLOBAL`Coordinates(c.X,c.Y+l-1))) in
                    ArrangeRec(Grid`PlaceShip(g, Ship`MakeShip(c, 
                        if d then mk_GLOBAL`Coordinates(c.X+l-1,c.Y) 
                        else mk_GLOBAL`Coordinates(c.X,c.Y+l-1))), tl s)
)
measure ArrangeRecMeasure;

DefaultArrange: () -> Grid`Grid
DefaultArrange() == ArrangeRec([], GLOBAL`SHIPS_BY_LEN)
post len RESULT = len GLOBAL`SHIPS_BY_LEN;


end DefaultArranger