functions

DefaultArrange: () -> Grid
DefaultArrange() == DefaultArrangeRec([], SHIPS_BY_LEN)
post similarSeqs[nat]([s.Length | s in seq RESULT], SHIPS_BY_LEN);


DefaultArrangeRec: Grid * seq of nat -> Grid
DefaultArrangeRec(g, s) == ( 
    if s = [] then g
    else let l = hd s, combinations = 
                {mk_(d, c) | d in set {true, false}, -- Pattern matching is likely to be too complex for Isabelle translation
                             c in set ALL_COORDINATES} in
            let mk_(d, c) in set combinations be st
            PlaceableShip(g, MakeShip(c, 
                if d then mk_Coordinates(c.X+l-1,c.Y) else mk_Coordinates(c.X,c.Y+l-1))) in
                    DefaultArrangeRec(PlaceShip(g, MakeShip(c, 
                        if d then mk_Coordinates(c.X+l-1,c.Y) 
                        else mk_Coordinates(c.X,c.Y+l-1))), tl s)
)
measure DefaultArrangeRecMeasure;


DefaultArrangeRecMeasure: Grid * seq of nat -> nat
DefaultArrangeRecMeasure(g, s) == len s