module GameController
imports from GLOBAL all,
        from Player all
exports all
definitions

types
GameController ::
    attacker : Player`Player
    defender : Player`Player
    inv g == g.attacker <> g.defender;

functions
MakeGameController: Player`Player * Player`Player -> GameController
MakeGameController(p1, p2) == mk_GameController(p1, p2);

Reset: Player`Player * Player`Player -> GameController
Reset(p1, p2) == mk_GameController(Player`ResetPlayer(p1), Player`ResetPlayer(p2))
post RESULT.attacker.Points = 0 and RESULT.defender.Points = 0;

StartMeasure: GameController * seq of nat -> nat
StartMeasure(gc, movesLeft) == 
    let nGuesses = len gc.attacker.guessHist.Coords + len gc.defender.guessHist.Coords in
        GLOBAL`MAX_TOTAL_GUESSES - nGuesses;

Start: GameController * seq of nat -> GameController
Start(gc, movesLeft) == 
    if movesLeft = [] then gc
        else if gc.defender.Points < GLOBAL`N_SHIPS then 
            let mk_(a, d) = Player`TakeTurn(gc.attacker, gc.defender) in
            Start(mk_GameController(d, a), tl movesLeft)
    else gc
measure StartMeasure;

end GameController